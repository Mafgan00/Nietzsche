package atcoder;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URI;
import java.util.Arrays;

import javax.tools.Diagnostic;
import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaCompiler.CompilationTask;
import javax.tools.JavaFileObject;
import javax.tools.SimpleJavaFileObject;
import javax.tools.ToolProvider;

public class Main2 {

	  public static void main(String args[]) throws IOException {

	    JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
	    DiagnosticCollector<JavaFileObject> diagnostics =
	      new DiagnosticCollector<JavaFileObject>();

	    String src =
	      "public class Main {" +
	      "public static int main(String args[]) {" +
	      "System.out.println(\"This is in another java file\");" +
	      "return(1);" +
	      "}" +
	      "}";

	    JavaFileObject file = (JavaFileObject) new JavaSourceFromString("Main", src);

	    String[] compileOptions = new String[] {"-d", "bin"} ;
	    Iterable<String> compilationOptionss = Arrays.asList(compileOptions);

	    Iterable <? extends JavaFileObject > compilationUnits = Arrays.asList(file);
	    CompilationTask task = compiler.getTask(
	                             null,
	                             null,
	                             diagnostics,
	                             compilationOptionss,
	                             null,
	                             compilationUnits
	                           );

	    boolean success = task.call();
	    for (Diagnostic<?> diagnostic : diagnostics.getDiagnostics()) {
	      System.out.println(diagnostic.getCode());
	      System.out.println(diagnostic.getKind());
	      System.out.println(diagnostic.getPosition());
	      System.out.println(diagnostic.getStartPosition());
	      System.out.println(diagnostic.getEndPosition());
	      System.out.println(diagnostic.getSource());
	      System.out.println(diagnostic.getMessage(null));

	    }
	    System.out.println("Success: " + success);
	    
	    if (success) {
	      Object ret;
	      try {
	        Class<?> clazz = Class.forName("HelloWorld");
	        Method method = clazz.getMethod("main", new Class[] { String[].class });
	        ret = method.invoke(null, new Object[] { null });
	        System.out.println(ret);
	      } catch (ClassNotFoundException e) {
	        System.err.println("Class not found: " + e);
	      } catch (NoSuchMethodException e) {
	        System.err.println("No such method: " + e);
	      } catch (IllegalAccessException e) {
	        System.err.println("Illegal access: " + e);
	      } catch (InvocationTargetException e) {
	        System.err.println("Invocation target: " + e);
	      }
	    }
	  }
	}

	class JavaSourceFromString extends SimpleJavaFileObject {

	  final String code;

	  JavaSourceFromString(String name, String code) {
	    super(URI.create("string:///" + name.replace('.', '/') +
	                     Kind.SOURCE.extension), Kind.SOURCE);
	    this.code = code;
	  }

	  @Override
	  public CharSequence getCharContent(boolean ignoreEncodingErrors) {
	    return code;
	  }
	}
